function Vdiff = solvevoltage(tumor, current_uA)
    % Solve forward problem with interactive electrode placement
    % Click two points: fixed then movable electrode
    % Solves ∇·(σ∇u) = 0 with Neumann BCs
    % Returns voltage difference and voltage map

    % Parameters
    phantom_radius = 35;   % mm
    dx = 0.5;              % mm
    fat_sigma = 0.04;      % S/m
    tumor_sigma = 0.4;     % S/m
    current = current_uA * 1e-6;  % Convert µA to A

    % Grid Setup
    x = -phantom_radius:dx:phantom_radius;
    y = -phantom_radius:dx:phantom_radius;
    [X, Y] = meshgrid(x, y);
    [Ny, Nx] = size(X);
    N = Nx * Ny;
    idx = @(i,j) (j-1)*Ny + i;

    % Conductivity Map
    sigma = fat_sigma * ones(size(X));
    tumor_mask = (X - tumor.x).^2 + (Y - tumor.y).^2 <= (tumor.r / 2)^2;
    sigma(tumor_mask) = tumor_sigma;

    % Electrode Placement
    figure('Name', 'Click Fixed Electrode, then Movable Electrode');
    imagesc(x, y, sigma);
    axis equal tight;
    set(gca, 'YDir', 'normal');
    xlabel('x (mm)'); ylabel('y (mm)');
    title('Click Fixed Electrode, then Movable Electrode');
    colorbar;
    [x_clicks, y_clicks] = ginput(2);
    fixed_el_pos = [x_clicks(1), y_clicks(1)];
    movable_el_pos   = [x_clicks(2), y_clicks(2)];
    close(gcf);

    % Sparse Matrix Assembly with Neum BCs -----
    max_entries = Ny * Nx * 5;
    rows = zeros(1, max_entries);
    cols = zeros(1, max_entries);
    vals = zeros(1, max_entries);
    b = zeros(N, 1);
    k = 1;

    for i = 1:Ny
        for j = 1:Nx
            p = idx(i,j);
            s_center = 0;

            if j > 1
                s_left = sigma(i,j-1);
                rows(k) = p; cols(k) = idx(i,j-1); vals(k) = s_left; k = k + 1;
                s_center = s_center + s_left;
            else
                s_center = s_center + sigma(i,j);
            end

            if j < Nx
                s_right = sigma(i,j+1);
                rows(k) = p; cols(k) = idx(i,j+1); vals(k) = s_right; k = k + 1;
                s_center = s_center + s_right;
            else
                s_center = s_center + sigma(i,j);
            end

            if i > 1
                s_up = sigma(i-1,j);
                rows(k) = p; cols(k) = idx(i-1,j); vals(k) = s_up; k = k + 1;
                s_center = s_center + s_up;
            else
                s_center = s_center + sigma(i,j);
            end

            if i < Ny
                s_down = sigma(i+1,j);
                rows(k) = p; cols(k) = idx(i+1,j); vals(k) = s_down; k = k + 1;
                s_center = s_center + s_down;
            else
                s_center = s_center + sigma(i,j);
            end

            rows(k) = p; cols(k) = p; vals(k) = -s_center; k = k + 1;
        end
    end

    rows = rows(1:k-1); cols = cols(1:k-1); vals = vals(1:k-1);
    A = sparse(rows, cols, vals, N, N);

    % ----- CURRENT INJECTION -----
    movable_idx = find_closest_index(X, Y, movable_el_pos);
    fixed_idx   = find_closest_index(X, Y, fixed_el_pos);
    b(movable_idx) =  current;
    b(fixed_idx)   = -current;

    % ----- SOLVE -----
    u = A \ b;
    U = reshape(u, Ny, Nx);

    % ----- VOLTAGE DIFFERENCE -----
    V1 = U(movable_idx);
    V2 = U(fixed_idx);
    Vdiff = V2 - V1;

    % ----- PLOT VOLTAGE FIELD -----
    figure('Name','Voltage Field with Tumor');
    contour(x, y, U, 100, 'LineWidth', 1);
    axis equal tight;
    set(gca, 'YDir', 'normal');
    xlabel('x (mm)');
    ylabel('y (mm)');
    colorbar;
    title('Voltage Field Contours with Tumor');

    hold on;

    % Plot electrodes
    movable = plot(movable_el_pos(1), movable_el_pos(2), 'ro', 'MarkerSize', 10, 'LineWidth', 2);
    fixed = plot(fixed_el_pos(1), fixed_el_pos(2), 'ko', 'MarkerSize', 10, 'LineWidth', 2);
    theta = linspace(0, 2*pi, 200);
    xt = tumor.r/2 * cos(theta) + tumor.x;
    yt = tumor.r/2 * sin(theta) + tumor.y;
    tumorplot = plot(xt, yt, 'b', 'LineWidth', 2);
    legend([movable fixed tumorplot], {'Movable Electrode', 'Fixed Electrode','Tumor'})
end

function ind = find_closest_index(X, Y, pt)
    dist2 = (X - pt(1)).^2 + (Y - pt(2)).^2;
    [~, linear_idx] = min(dist2(:));
    ind = linear_idx;
end